/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos

  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }

  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

let todos = [{
  title: "do laundary",
  completed: false,
  description: "i should do laundery  on wednesday",
  id: 0,
},
{
  title: "do ",
  completed: false,
  description: "i should do laundery  on wednesday",
  id: 1,
}
];

app.get("/todos", (req, res) => {
  res.status(200).json({
    todos
  });
});

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  let targetTodo = todos.find((item) => {
    return item.id === parseInt(id);
  })
  if (targetTodo) {
    //if id exist in the todo lists item
    res.status(200).json(targetTodo)
  } else {
    res.status(404).json({ error: "not Found" });
  }

})

app.post("/todos", (req, res) => {
  //input item object
  todoItem = req.body;
  //genrate id and add it inside the todoItem item
  todoItem.id = generateId();
  //now add the body too
  todos.push(todoItem);

  //send response and id as a json
  res.status(201).json({ id: todoItem.id })

})


app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const updateTodo = req.body;
  //find the todo item by its id
  const updateItemIndex = todos.findIndex(item => {
    return item.id == id;
  })
  if (updateItemIndex != -1) {
    //update the item in  that index (with the matching id)
    todos[updateItemIndex].title = updateTodo.title;
    todos[updateItemIndex].completed = updateTodo.completed;

    res.status(200).json(todos[updateItemIndex]);
  } else {
    res.status(404).json({ error: "todo not found" });
  }
})


app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  //find the todo item by its id
  const deleteItemIndex = todos.findIndex(item => {
    return item.id == id;
  })
  if (deleteItemIndex != -1) {
    // if idex was found, delete that todo item
    todos.splice(deleteItemIndex, 1);
    res.status(200).json({ msg: "todo item deleted" })
  } else {
    res.status(404).json({ error: "todo not found" });
  }
})

function generateId() {
  let id = Math.floor(Math.random() * 100);

  //check if id already exisit, returns true of false
  let containsID = todos.find((item) => {
    return item.id === id;
  });

  //generate a until unique id is found
  while (containsID) {
    //generate id
    id = Math.floor(Math.random() * 100);

    //check if id exitst in the list already
    containsID = todos.find((item) => {
      return item.id === id;
    });
  }
  return id;
}

app.use((req, res) => {
  res.status(404).send("404 not found");
})

app.listen(3000);
module.exports = app;